%start Programa
%%

Programa : ListaFuncoes { printf("Sem erros sintáticos e semânticos\n"); };

ListaFuncoes : Funcao
             | ListaFuncoes Funcao
             ;

Funcao : TipoRetorno ID '(' Parametros ')' BlocoComandos {
    insere_funcao_na_tabela($2, $1, $4.param_list);
    verifica_corpo_funcao($2, $6);
};

TipoRetorno : INT { $$ = INT; }
            | FLOAT { $$ = FLOAT; }
            | CHAR { $$ = CHAR; }
            | DOUBLE { $$ = DOUBLE; }
            | VOID { $$ = VOID; }
            ;

Parametros : ListaParametros { $$ = $1; }
           | { $$.tam = 0; }
           ;

ListaParametros : Parametro { inicializa_parametros(&$1, &$$); }
                | ListaParametros ',' Parametro { adiciona_parametro(&$1, &$3, &$$); }
                ;

Parametro : TipoVariavel ID {
    insere_variavel_na_tabela($2, $1);
    $$.tipo = $1; $$.id = $2;
}
         | TipoVariavel { $$.tipo = $1; $$.id = -1; }
         ;

BlocoComandos : '{' ListaComandos '}' { $$ = $2; };

ListaComandos :
              | ListaComandos Comando
              ;

Comando : Declaracao ';'
        | Atribuicao ';' { verifica_atribuicao($1); }
        | ChamadaFuncao ';' { verifica_chamada_funcao($1); }
        | ComandoIfElse
        | ComandoWhile
        | ComandoFor
        | ComandoSwitch
        | BlocoComandos
        | RETURN ExpressaoSimples ';' { verifica_retorno($2); }
        | RETURN ';'
        | BREAK ';'
        | ';'
        ;

ComandoIfElse : IF '(' ExpressaoSimples ')' Comando ENDIF { verifica_condicional($3); }
              | IF '(' ExpressaoSimples ')' Comando ELSE Comando ENDIF { verifica_condicional($3); }
              ;

ComandoWhile : WHILE '(' ExpressaoSimples ')' Comando { verifica_loop($3); };

ComandoFor : FOR '(' ForInicio Forcondicao ForIncremento ')' Comando { verifica_for($3, $4, $5); };

ForInicio : Atribuicao ';'
          | Declaracao ';'
          | ';'
          ;

Forcondicao : ExpressaoSimples ';'
            | ';'
            ;

ForIncremento : Atribuicao
              | 
              ;

ComandoSwitch : SWITCH '(' ExpressaoSimples ')' '{' ListaCasos '}' { verifica_switch($3, $6); };

ListaCasos :
           | ListaCasos Caso
           ;

Caso : CASE Constante ':' ListaComandos;

Constante : NUM
          | STRINGS
          ;

Declaracao : TipoVariavel ListaIDs { insere_lista_ids_tabela($1, $2); };

TipoVariavel : INT { $$ = INT; }
             | FLOAT { $$ = FLOAT; }
             | CHAR { $$ = CHAR; }
             | DOUBLE { $$ = DOUBLE; }
             ;

ListaIDs : ID '=' ExpressaoSimples { verifica_tipos_atrib($1, $3); insere_variavel_na_tabela($1, $3.tipo); }
         | ID { insere_variavel_na_tabela($1, TIPO_DEFAULT); }
         | ListaIDs ',' ID '=' ExpressaoSimples { verifica_tipos_atrib($3, $5); insere_variavel_na_tabela($3, $5.tipo); }
         | ListaIDs ',' ID { insere_variavel_na_tabela($3, TIPO_DEFAULT); }
         ;

Atribuicao : ID '=' ExpressaoSimples { $$.place = $1; $$.tipo = $3.tipo; };

ExpressaoSimples : ExpressaoAritmetica { $$ = $1; }
                 | ExpressaoRelacional { $$ = $1; }
                 | ExpressaoLogica { $$ = $1; }
                 ;

ExpressaoRelacional : ExpressaoSimples '<' ExpressaoSimples { $$ = tipo_resultante_relacional($1, $3); }
                    | ExpressaoSimples '>' ExpressaoSimples { $$ = tipo_resultante_relacional($1, $3); }
                    | ExpressaoSimples MAIOR ExpressaoSimples { $$ = tipo_resultante_relacional($1, $3); }
                    | ExpressaoSimples MENOR ExpressaoSimples { $$ = tipo_resultante_relacional($1, $3); }
                    | ExpressaoSimples IGUAL ExpressaoSimples { $$ = tipo_resultante_relacional($1, $3); }
                    | ExpressaoSimples DIFERENTE ExpressaoSimples { $$ = tipo_resultante_relacional($1, $3); }
                    ;

ExpressaoLogica : ExpressaoSimples AND ExpressaoSimples { $$ = tipo_resultante_logica($1, $3); }
                | ExpressaoSimples OR ExpressaoSimples { $$ = tipo_resultante_logica($1, $3); }
                | NOT ExpressaoSimples { $$ = tipo_resultante_logica_unaria($2); }
                ;

ExpressaoAritmetica : ExpressaoAritmetica '+' ExpressaoAritmetica { $$ = tipo_resultante_arit($1, $3); }
                    | ExpressaoAritmetica '-' ExpressaoAritmetica { $$ = tipo_resultante_arit($1, $3); }
                    | ExpressaoAritmetica '*' ExpressaoAritmetica { $$ = tipo_resultante_arit($1, $3); }
                    | ExpressaoAritmetica '/' ExpressaoAritmetica { $$ = tipo_resultante_arit($1, $3); }
                    | '(' ExpressaoSimples ')' { $$ = $2; }
                    | '-' ExpressaoAritmetica { $$ = $2; }
                    | Fator { $$ = $1; }
                    ;

Fator : ID { verifica_var_declarada($1); $$ = cria_exp_id($1); }
      | ID '[' ExpressaoSimples ']' { verifica_vetor($1, $3); $$ = cria_exp_vet($1, $3); }
      | NUM { $$ = cria_exp_num($1); }
      | STRINGS { $$ = cria_exp_string($1); }
      | ChamadaFuncao { $$ = $1; }
      ;

ChamadaFuncao : ID '(' ArgumentosChamada ')' { verifica_chamada_funcao_com_args($1, $3); $$ = cria_exp_func($1, $3); }
              ;

ArgumentosChamada :
                  | ListaArgumentos { $$ = $1; }
                  ;

ListaArgumentos : ExpressaoSimples { inicializa_argumentos(&$1, &$$); }
                | ListaArgumentos ',' ExpressaoSimples { adiciona_argumento(&$1, &$3, &$$); }
                ;

%%

// Implementar funções auxiliares (verifica_var_declarada, tipo_resultante_arit etc.) no C.
